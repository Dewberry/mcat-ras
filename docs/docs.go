// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "slawler@dewberry.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/geospatialdata": {
            "get": {
                "description": "Extract geospatial data from a RAS model given an s3 key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Extract geospatial data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/index": {
            "get": {
                "description": "Extract metadata from a RAS model given an s3 key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Index a RAS model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tools.Model"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/isamodel": {
            "get": {
                "description": "Check if the given key is a RAS model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Check if the given key is a RAS model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/isgeospatial": {
            "get": {
                "description": "Check if the RAS model has geospatial information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Check if the RAS model has geospatial information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/modeltype": {
            "get": {
                "description": "Extract the model type given an s3 key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Extract the model type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RAS",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/modelversion": {
            "get": {
                "description": "Extract the RAS model version given an s3 key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCAT"
                ],
                "summary": "Extract the RAS model version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "/models/ras/CHURCH HOUSE GULLY/CHURCH HOUSE GULLY.prj",
                        "name": "definition_file",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "4.0",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Check which services are operational",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Status Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.SimpleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "tools.ControlFiles": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "placeholder",
                    "type": "object",
                    "additionalProperties": true
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tools.ForcingFiles": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "placeholder",
                    "type": "object",
                    "additionalProperties": true
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tools.GeometryFiles": {
            "type": "object",
            "properties": {
                "featuresProperties": {
                    "description": "placeholder",
                    "type": "object",
                    "additionalProperties": true
                },
                "georeference": {
                    "description": "placeholder",
                    "type": "object"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tools.InputFiles": {
            "type": "object",
            "properties": {
                "controlFiles": {
                    "$ref": "#/definitions/tools.ControlFiles"
                },
                "forcingFiles": {
                    "$ref": "#/definitions/tools.ForcingFiles"
                },
                "geometryFiles": {
                    "$ref": "#/definitions/tools.GeometryFiles"
                },
                "localVariables": {
                    "description": "placeholder",
                    "type": "object"
                },
                "simulationVariables": {
                    "description": "placeholder",
                    "type": "object"
                }
            }
        },
        "tools.Model": {
            "type": "object",
            "properties": {
                "definitionFile": {
                    "type": "string"
                },
                "files": {
                    "$ref": "#/definitions/tools.ModelFiles"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "tools.ModelFiles": {
            "type": "object",
            "properties": {
                "inputFiles": {
                    "$ref": "#/definitions/tools.InputFiles"
                },
                "outputFiles": {
                    "$ref": "#/definitions/tools.OutputFiles"
                },
                "supplementalFiles": {
                    "$ref": "#/definitions/tools.SupplementalFiles"
                }
            }
        },
        "tools.OutputFiles": {
            "type": "object",
            "properties": {
                "modelPrediction": {
                    "description": "placeholder",
                    "type": "object"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "runFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "runLogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tools.SupplementalFiles": {
            "type": "object",
            "properties": {
                "observationalData": {
                    "description": "placeholder",
                    "type": "object"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "visulizations": {
                    "description": "placeholder",
                    "type": "object"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:5600",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "RAS MCAT API",
	Description: "API for the RAS MCAT",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
